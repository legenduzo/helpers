#!/bin/bash
set -e # Exit on error

currentUser=$(who | awk '{print $1}' | uniq)
PATH_TO_CWD=$PWD

# Task 1: Create .log.txt in the cwd
touch .log.txt

# Task 2: Check if .gitignore exists, and if not, create it. Append ".log.txt" to it
if [ ! -f .gitignore ]; then
    touch .gitignore
fi
if ! grep -Fxq ".log.txt" .gitignore; then
    echo ".log.txt" >> .gitignore
fi

# Task 3: Automate commits
CRON_JOB="*/30 * * * * /bin/bash -c 'echo -e \"\n\n\n\n\n\" && echo \"$(date "+\%H:\%M"): Starting autocommit\" && cd $PATH_TO_CWD && git commit -am \"$(date "+\%H:\%M") autocommit\" && git push && echo \"$(date "+\%H:\%M"): progress pushed\"' >> $PATH_TO_CWD/.log.txt 2>&1"

# Check if crontab and the exact cron job already exists to avoid duplicates
if crontab -u "$currentUser" -l &> /dev/null; then
    (crontab -u "$currentUser" -l | grep -Fv "$CRON_JOB"; echo "$CRON_JOB") | crontab -u "$currentUser" -
else 
    echo "$CRON_JOB" | crontab -u "$currentUser" -
fi

# Task 4: Create commitlog command
{
    cat << EOF > /usr/local/bin/commitlog
    #!/bin/bash
    tail -f "$PATH_TO_CWD/.log.txt"
EOF
} && chmod +x /usr/local/bin/commitlog

# Task 5: Print instructions to stdout
echo 'Auto commits set.'
echo 'Run "commitlog" in a split terminal to monitor progress'
